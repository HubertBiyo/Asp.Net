<div id="app">
    <section class="float-left mut-left">
        <my-menu v-bind:active="active"></my-menu>
    </section>
    <section class="float-left main-container">
        <div class="admin-from float-left">
            <el-button type="primary" size="medium" v-on:click="addCapial">新增</el-button>
        </div>
        <div class="table-1">
            <template>
                <el-table :data="capitalList" max-height="450" border v-loading="LoadCapital" element-loading-text="拼命加载中">
                    <el-table-column type="index" width="50"></el-table-column>
                    <el-table-column prop="Code" label="编号" width="220">
                    </el-table-column>
                    <el-table-column prop="Category" :formatter="CategoryFormat" label="分类">
                    </el-table-column>
                    <el-table-column prop="Consumer" label="消费者" width="160">
                    </el-table-column>
                    <el-table-column prop="OutMoney" label="消费金额">
                    </el-table-column>
                    <el-table-column prop="AccountType" :formatter="AccountTypeFormat" label="账户">
                    </el-table-column>
                    <el-table-column prop="OrderTime" width="180"  :formatter="dateFormat" label="消费时间">
                    </el-table-column>
                    <el-table-column fixed="right" label="操作" width="160">
                        <template slot-scope="scope">
                            <el-button type="primary" plain v-on:click="handelEdit(scope.row)" size="small">编辑</el-button>
                            <el-button type="primary" plain v-on:click="showdelete(scope.row.Id)" size="small">删除</el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <br />
                <div class="page-item" id="pageDiv">
                </div>
            </template>
        </div>

    </section>
    <!--element弹框-->
    <el-dialog :title="titleMap[dialogStatus]" :visible.sync="dialogFormVisible">
        <el-form :model="add" label-width="80px" :rules="rules" ref="add">

            <el-row>
                <el-col :span="12">
                    <el-form-item label="分类" prop="Category">
                        <el-select v-model="add.Category" placeholder="请选择">
                            <el-option v-for="item in CategoryOptions"
                                       :key="item.value"
                                       :label="item.label"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </el-col>
                <el-col :span="12">
                    <el-form-item label="消费者" prop="Consumer">
                        <el-input v-model="add.Consumer" auto-complete="off"></el-input>
                    </el-form-item>
                </el-col>

            </el-row>

            <el-row>
                <el-col :span="12">
                    <el-form-item label="消费时间" prop="OrderTime">
                        <div>
                            <el-date-picker v-model="add.OrderTime" v-on:change="getOrderTime" value-format="yyyy-MM-dd HH:mm:ss" type="datetime" placeholder="选择日期">
                            </el-date-picker>
                        </div>
                    </el-form-item>
                </el-col>
                <el-col :span="12">
                    <el-form-item label="账户" prop="AccountType">
                        <el-select v-model="add.AccountType" placeholder="请选择">
                            <el-option v-for="item in AccountTypeOptions"
                                       :key="item.value"
                                       :label="item.label"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </el-col>
            </el-row>
            <el-row>
                <el-col :span="12">
                    <el-form-item label="消费金额" prop="OutMoney">
                        <el-input type="" v-model="add.OutMoney" auto-complete="off"></el-input>
                    </el-form-item>
                </el-col>
            </el-row>
            <el-form-item label="备注" prop="Remark">
                <el-input type="textarea" :rows="2" v-model="add.Remark" auto-complete="off"></el-input>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogFormVisible=false">取消</el-button>
            <el-button type="primary" v-on:click="save('add')">确定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    var vm = new Vue({
        el: '#app',
        data: {
            pageelement: '#pageDiv',
            condition: {
                pageindex: 1,
                pagesize: 10,
            },
            active: 'capital',
            capitalList: [],
            LoadCapital: false,
            dialogFormVisible: false,
            dialogStatus: '',
            titleMap: {
                addCapital: '新增资金流动记录',
                editCapital: '编辑资金流动记录'
            },
            add: {
                Category: '',
                AccountType: '',
                OutMoney: '',
                Consumer: '豆旭波',
                Remark: '',
                CreateTime: '',
                OrderTime: '',
            },
            rules: {
                Category: [
                    { required: true, message: '请选择分类', trigger: 'change' }
                ],
                AccountType: [
                    { required: true, message: '请选择账户', trigger: 'change' }
                ],
                OutMoney: [
                    { required: true, message: '请输入金额', trigger: 'blur' },
                ],
                Consumer: [
                    { required: true, message: '请输入姓名', trigger: 'blur' },
                    { min: 2, max: 10, message: '长度在2到10个字符', trigger: 'blur' }
                ],
                OrderTime: [
                    { required: true, message: '请选择日期' },
                    { type: 'date', message: '请选择您的出生日期', trigger: 'change' }
                ],
            },
            AccountTypeOptions: [{
                value: 'Alipay',
                label: '支付宝'
            }, {
                value: 'Wechat',
                label: '微信'
            }, {
                value: 'BankCard',
                label: '银行卡'
            }],
            CategoryOptions: [{
                value: '1',
                label: '支出'
            }, {
                value: '2',
                label: '收入'
            }],
            value: '',
        },
        methods: {
            getOrderTime: function (val) {
                this.add.OrderTime = new Date(moment(val).format("YYYY-MM-DD HH:mm:ss"));
            },
            loaddata: function () {
                $.post('/account/SearchCapitalFlowList', this.condition, function (res) {
                    if (res.Code == 0) {
                        vm.$data.LoadCapital = false;
                        vm.$data.capitalList = res.Data;
                        vm.paging(res.Total);
                    }
                    else {
                        vm.$data.LoadCapital = true;
                    }
                });
            },
            addCapial: function () {
                this.dialogFormVisible = true;
                this.addtype = 'add';
                this.dialogStatus = "addCapital";
                this.add = {
                    Category: '',
                    AccountType: '',
                    OutMoney: '',
                    Consumer: '豆旭波',
                    Remark: '',
                    CreateTime: '',
                    OrderTime: '',
                };
            },
            handelEdit: function (item) {
                this.dialogFormVisible = true;
                this.addtype = 'edit';
                this.dialogStatus = "editCapital"
                this.add = item;
                this.add.OrderTime = new Date(moment(this.add.OrderTime).format("YYYY-MM-DD HH:mm:ss"));
            },
            save: function (formName) {
                var _this = this;
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        var url = '/account/AddCapitalFlow';
                        if (_this.addtype == 'edit') {
                            url = '/account/EditCapitalFlow';
                        }
                        _this.add.OrderTime = moment(_this.add.OrderTime).format("YYYY-MM-DD HH:mm:ss");
                        $.ajax({
                            type: 'post',
                            url: url,
                            data: _this.add,
                            dataType: "json",
                            success: function (res) {
                                if (res.Code == 0) {
                                    vm.$data.dialogFormVisible = false;
                                    _this.$message({
                                        message: res.Message,
                                        type: 'success',
                                        center: true
                                    });
                                    vm.loaddata();
                                } else {
                                    _this.$message({
                                        message: res.Message,
                                        type: 'error',
                                        center: true
                                    });
                                }
                            },
                            error: function (d) {
                                _this.$message({
                                    message: "服务器异常",
                                    type: 'error',
                                    center: true
                                });
                            }
                        })
                    } else {
                        return false;
                    }
                });
            },

            showdelete: function (id) {
                var _this = this;
                _this.$confirm('您确认删除此记录吗?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(function () {
                    $.ajax({
                        type: 'post',
                        url: '/account/DeleteCapitalFlow',
                        data: { id: id },
                        dataType: 'Json',
                        success: function (res) {
                            if (res.Code == 0) {
                                _this.$message({
                                    type: 'success',
                                    message: res.Message
                                });
                                vm.loaddata();
                            }
                            else {
                                _this.$message({
                                    type: 'success',
                                    message: res.Message
                                });
                            }
                        },
                        error: function (d) {
                            _this.$message({
                                type: 'success',
                                message: '服务器异常'
                            });
                        }

                    })
                })
            },
            CategoryFormat: function (row, column) {
                var category = row[column.property];
                switch (category) {
                    case '1':
                        return "支出";
                    case '2':
                        return "收入";
                    default:
                        return category;
                }
            },
            CategoryFormat: function (row, column) {
                var category = row[column.property];
                switch (category) {
                    case '1':
                        return "支出";
                    case '2':
                        return "收入";
                    default:
                        return category;
                }
            },
            AccountTypeFormat: function (row, column) {
                var accountType = row[column.property];
                switch (accountType) {
                    case 'Wechat':
                        return "微信";
                    case 'Alipay':
                        return "支付宝";
                    case 'BankCard':
                        return "银行卡";
                    default:
                        return accountType;
                }
            },
            /*日期格式*/
            dateFormat: function (row, column) {
                var date = row[column.property];
                if (date == undefined) {
                    return "";
                }
                return moment(date).format("YYYY-MM-DD HH:mm:ss");
            },
            /*分页*/
            paging: function (total) {
                $(vm.$data.pageelement).bootstrapPaginator({
                    currentPage: vm.$data.condition.pageindex,
                    totalPages: Math.ceil(total / vm.$data.condition.pagesize),
                    numberOfPages: 5,
                    onPageClicked: function (e, s, a, p) {
                        if (vm.$data.condition.pageindex != p) {
                            vm.$data.condition.pageindex = p;
                            vm.loaddata();
                        }
                    }
                });

            },
        },
        filters: {

        },
    })

    vm.loaddata();
    $(function () {
    })
</script>